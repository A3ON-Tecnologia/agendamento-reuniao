<?php
require_once '../config/database.php';
require_once '../classes/User.php';
require_once '../classes/Appointment.php';
require_once '../classes/AvailabilitySlot.php';

// Mock user info for direct access
$user_info = [
    'id' => 1,
    'name' => 'Gestor RH',
    'email' => 'hr@empresa.com',
    'role' => 'hr_manager'
];

$database = new Database();
$db = $database->getConnection();
$appointment = new Appointment($db);
$availability = new AvailabilitySlot($db);

// Get appointments for this HR manager
$appointments = $appointment->getAppointmentsByHRManager($user_info['id']);
$availability_slots = $availability->getAvailabilityByHRManager($user_info['id']);

$days_of_week = [
    0 => 'Domingo',
    1 => 'Segunda-feira',
    2 => 'Terça-feira',
    3 => 'Quarta-feira',
    4 => 'Quinta-feira',
    5 => 'Sexta-feira',
    6 => 'Sábado'
];
?>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard RH - Sistema de Agendamentos</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif']
                    }
                }
            }
        }
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="max-w-full h-screen flex flex-col">
        <!-- Calendar View -->
        <div class="bg-white shadow rounded-lg flex-1 flex flex-col">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-medium text-gray-900">
                        <i class="fas fa-calendar-alt mr-2"></i>Calendário de Agendamentos
                    </h3>
                    <div class="flex space-x-2">
                        <button onclick="showSpecificDateModal()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200 text-sm">
                            <i class="fas fa-calendar-plus mr-2"></i>Agendar Reunião
                        </button>
                    </div>
                </div>
            </div>
            <div class="p-6 flex-1 overflow-y-auto">
                <!-- Calendar Container -->
                <div id="calendar" class="w-full">
                    <!-- Calendar Header -->
                    <div class="flex justify-between items-center mb-6">
                        <button id="prevMonth" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition duration-200">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <h2 id="currentMonth" class="text-2xl font-bold text-gray-900"></h2>
                        <button id="nextMonth" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition duration-200">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                    
                    <!-- Calendar Grid -->
                    <div class="grid grid-cols-7 gap-1 mb-2">
                        <div class="text-center font-semibold text-gray-600 py-3">Dom</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Seg</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Ter</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Qua</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Qui</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Sex</div>
                        <div class="text-center font-semibold text-gray-600 py-3">Sáb</div>
                    </div>
                    
                    
                    <!-- Calendar Days -->
                    <div id="calendarDays" class="grid grid-cols-7 gap-1 h-[400px]">
                        <!-- Days will be generated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Meeting Scheduling Modal -->
    <div id="specificDateModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white max-h-[90vh] overflow-y-auto">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Agendar Reunião</h3>
                    <button onclick="hideSpecificDateModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="meetingForm">
                    <div class="space-y-4">
                        <!-- Usuários -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Usuários Participantes</label>
                            <div class="relative">
                                <!-- Input field that opens dropdown -->
                                <div id="participantsInput" 
                                     class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white cursor-pointer min-h-[42px] flex flex-wrap items-center gap-1"
                                     onclick="toggleParticipantsDropdown()">
                                    <span id="participantsPlaceholder" class="text-gray-500">Clique para selecionar participantes...</span>
                                    <div id="selectedParticipants" class="flex flex-wrap gap-1"></div>
                                    <i class="fas fa-chevron-down ml-auto text-gray-400" id="dropdownIcon"></i>
                                </div>
                                
                                <!-- Dropdown list -->
                                <div id="participantsDropdown" 
                                     class="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                                    <!-- Search input -->
                                    <div class="p-2 border-b border-gray-200">
                                        <input type="text" 
                                               id="participantsSearch" 
                                               placeholder="Buscar usuários..." 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
                                               onclick="event.stopPropagation()"
                                               oninput="filterParticipants()">
                                    </div>
                                    <!-- Users list -->
                                    <div id="participantsList" class="py-1">
                                        <div class="px-3 py-2 text-gray-500 text-sm">Carregando usuários...</div>
                                    </div>
                                </div>
                            </div>
                            <p class="text-xs text-gray-500 mt-1">Clique no campo acima para selecionar múltiplos participantes</p>
                        </div>

                        <!-- Data -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Data</label>
                            <input type="date" id="meetingDate" name="meeting_date" required 
                                   min="<?php echo date('Y-m-d'); ?>"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                        </div>

                        <!-- Horários -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Hora de Início</label>
                                <input type="time" id="meetingStartTime" name="meeting_start_time" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Hora de Fim</label>
                                <input type="time" id="meetingEndTime" name="meeting_end_time" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                        </div>

                        <!-- Assunto -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Assunto</label>
                            <textarea id="meetingSubject" name="meeting_subject" required rows="3"
                                      placeholder="Digite o assunto da reunião..."
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 resize-none"></textarea>
                        </div>

                        <div class="flex justify-end space-x-3 pt-4">
                            <button type="button" onclick="hideSpecificDateModal()" 
                                    class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition duration-200">
                                Cancelar
                            </button>
                            <button type="submit" 
                                    class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition duration-200">
                                <i class="fas fa-calendar-plus mr-2"></i>Agendar Reunião
                            </button>
                        </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Availability Configuration Modal -->
    <div id="availabilityModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Configurar Horários Disponíveis</h3>
                    <button onclick="hideAvailabilityModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="availabilityForm" action="../api/save_availability.php" method="POST">
                    <div class="space-y-4">
                        <?php for ($day = 1; $day <= 5; $day++): ?>
                            <div class="border border-gray-200 rounded-lg p-4">
                                <div class="flex items-center justify-between mb-3">
                                    <label class="text-sm font-medium text-gray-700"><?php echo $days_of_week[$day]; ?></label>
                                    <input type="checkbox" name="active_days[]" value="<?php echo $day; ?>" 
                                           class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                                           <?php 
                                           foreach($availability_slots as $slot) {
                                               if($slot['day_of_week'] == $day) echo 'checked';
                                           }
                                           ?>>
                                </div>
                                <div class="grid grid-cols-3 gap-4">
                                    <div>
                                        <label class="block text-xs text-gray-600 mb-1">Início</label>
                                        <input type="time" name="start_time[<?php echo $day; ?>]" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                                               value="<?php 
                                               foreach($availability_slots as $slot) {
                                                   if($slot['day_of_week'] == $day) echo date('H:i', strtotime($slot['start_time']));
                                               }
                                               ?>">
                                    </div>
                                    <div>
                                        <label class="block text-xs text-gray-600 mb-1">Fim</label>
                                        <input type="time" name="end_time[<?php echo $day; ?>]" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                                               value="<?php 
                                               foreach($availability_slots as $slot) {
                                                   if($slot['day_of_week'] == $day) echo date('H:i', strtotime($slot['end_time']));
                                               }
                                               ?>">
                                    </div>
                                    <div>
                                        <label class="block text-xs text-gray-600 mb-1">Duração (min)</label>
                                        <select name="duration[<?php echo $day; ?>]" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                            <option value="30">30 min</option>
                                            <option value="60" selected>60 min</option>
                                            <option value="90">90 min</option>
                                            <option value="120">120 min</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        <?php endfor; ?>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="hideAvailabilityModal()" 
                                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                            Salvar Configurações
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- User Profile Modal -->
    <div id="profileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Perfil do Usuário</h3>
                    <button onclick="hideProfileModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <form id="profileForm">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nome</label>
                            <input type="text" id="profileName" name="name" required 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                   value="<?php echo htmlspecialchars($user_info['name']); ?>">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">E-mail</label>
                            <input type="email" id="profileEmail" name="email" required 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                   value="<?php echo htmlspecialchars($user_info['email']); ?>">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Senha</label>
                            <div class="relative">
                                <input type="password" id="profilePassword" name="password" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                                       placeholder="Digite a nova senha">
                                <button type="button" onclick="togglePasswordVisibility('profilePassword')" 
                                        class="absolute right-3 top-3 text-gray-400 hover:text-gray-600">
                                    <i id="profilePasswordIcon" class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="hideProfileModal()" 
                                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                            Salvar Alterações
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        function showAvailabilityModal() {
            document.getElementById('availabilityModal').classList.remove('hidden');
        }

        function hideAvailabilityModal() {
            document.getElementById('availabilityModal').classList.add('hidden');
        }

        function updateAppointmentStatus(appointmentId, status) {
            if (confirm('Tem certeza que deseja alterar o status desta reunião?')) {
                fetch('../api/update_appointment_status.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        appointment_id: appointmentId,
                        status: status
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Erro ao atualizar status da reunião');
                    }
                });
            }
        }

        function loadSpecificAvailability() {
            console.log('Loading specific availability...');
            fetch('../api/get_specific_availability.php')
                .then(response => response.json())
                .then(data => {
                    console.log('API Response:', data); // Debug log
                    const container = document.getElementById('specificAvailabilityList');
                    
                    if (data.success && data.availability && data.availability.length > 0) {
                        // Group by date
                        const groupedByDate = {};
                        data.availability.forEach(item => {
                            if (!groupedByDate[item.specific_date]) {
                                groupedByDate[item.specific_date] = [];
                            }
                            groupedByDate[item.specific_date].push(item);
                        });

                        let html = '<div class="grid grid-cols-1 md:grid-cols-2 gap-4">';
                        Object.keys(groupedByDate).sort().forEach(date => {
                            const slots = groupedByDate[date];
                            const dayOfWeek = getDayOfWeek(date);
                            
                            html += `
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 class="font-medium text-gray-900">${formatDate(date)}</h4>
                                            <p class="text-xs text-gray-500">${dayOfWeek}</p>
                                        </div>
                                        <div class="flex space-x-2">
                                            <button onclick="editSpecificDate('${date}')" class="text-blue-600 hover:text-blue-800 text-sm" title="Editar">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button onclick="confirmDeleteDate('${date}')" class="text-red-600 hover:text-red-800 text-sm" title="Excluir">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="space-y-1">
                            `;
                            
                            slots.forEach(slot => {
                                html += `
                                    <p class="text-sm text-gray-600">
                                        <i class="fas fa-clock mr-1"></i>
                                        ${slot.start_time.substring(0,5)} - ${slot.end_time.substring(0,5)}
                                        <span class="text-xs text-gray-500 ml-2">(${slot.slot_duration} min)</span>
                                    </p>
                                `;
                            });
                            
                            html += `
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                        container.innerHTML = html;
                        console.log('Availability loaded successfully with onclick handlers');
                    } else {
                        console.log('No availability data found or empty array'); // Debug log
                        container.innerHTML = `
                            <div class="text-center py-8">
                                <i class="fas fa-calendar-times text-gray-400 text-4xl mb-4"></i>
                                <p class="text-gray-600">Nenhuma data específica configurada ainda.</p>
                                <button onclick="showSpecificDateModal()" class="mt-4 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                    Configurar Data Específica
                                </button>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading availability:', error);
                    const container = document.getElementById('specificAvailabilityList');
                    container.innerHTML = `
                        <div class="text-center py-8">
                            <i class="fas fa-exclamation-triangle text-red-400 text-4xl mb-4"></i>
                            <p class="text-red-600">Erro ao carregar horários disponíveis.</p>
                            <button onclick="loadSpecificAvailability()" class="mt-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Tentar Novamente
                            </button>
                        </div>
                    `;
                });
        }

        // Simple onclick delete function
        function confirmDeleteDate(date) {
            console.log('confirmDeleteDate called with date:', date);
            if (confirm('Tem certeza que deseja remover os horários desta data?')) {
                console.log('User confirmed deletion for date:', date);
                
                fetch('../api/delete_specific_availability.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ specific_date: date })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Delete response:', data);
                    if (data.success) {
                        alert('Horários removidos com sucesso!');
                        loadSpecificAvailability();
                    } else {
                        alert('Erro ao remover horários: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Erro ao remover horários. Tente novamente.');
                });
            } else {
                console.log('User cancelled deletion for date:', date);
            }
        }

        function getDayOfWeek(dateString) {
            const days = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];
            const date = new Date(dateString + 'T00:00:00');
            return days[date.getDay()];
        }

        function formatDate(dateString) {
            const date = new Date(dateString + 'T00:00:00');
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        // Handle form submission
        document.getElementById('availabilityForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('../api/save_availability.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Erro ao salvar configurações');
                }
            });
        });

        // Handle meeting form submission
        document.getElementById('meetingForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            // Check if participants are selected
            if (selectedParticipants.length === 0) {
                alert('Por favor, selecione pelo menos um participante para a reunião.');
                return;
            }
            
            // Get form data
            const meetingDate = document.getElementById('meetingDate').value;
            const meetingStartTime = document.getElementById('meetingStartTime').value;
            const meetingEndTime = document.getElementById('meetingEndTime').value;
            const meetingSubject = document.getElementById('meetingSubject').value;
            
            // Validate time range
            if (meetingStartTime >= meetingEndTime) {
                alert('A hora de início deve ser anterior à hora de fim.');
                return;
            }
            
            // Prepare meeting data for API
            const meetingData = {
                date: meetingDate,
                start_time: meetingStartTime,
                end_time: meetingEndTime,
                subject: meetingSubject,
                description: '', // Pode ser expandido no futuro
                participants: selectedParticipants
            };
            
            // Send to API
            fetch('../api/create_meeting.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(meetingData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const participantNames = selectedParticipants.map(p => p.username).join(', ');
                    alert(`Reunião criada com sucesso!\nData: ${meetingDate}\nHorário: ${meetingStartTime} - ${meetingEndTime}\nAssunto: ${meetingSubject}\nParticipantes: ${participantNames}\nID da Reunião: ${data.meeting_id}`);
                    
                    hideSpecificDateModal();
                    // Clear form and reset participants
                    document.getElementById('meetingForm').reset();
                    selectedParticipants = [];
                    updateSelectedParticipantsDisplay();
                    closeParticipantsDropdown();
                } else {
                    alert('Erro ao criar reunião: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Erro ao conectar com o servidor. Tente novamente.');
            });
        });

        function showSpecificDateModal() {
            document.getElementById('specificDateModal').classList.remove('hidden');
            loadUsers(); // Carregar usuários ao abrir modal
        }

        function hideSpecificDateModal() {
            document.getElementById('specificDateModal').classList.add('hidden');
        }

        // Variables for new interactive participants selector
        let allUsers = [];
        let selectedParticipants = [];

        // Function to load users from API
        function loadUsers() {
            fetch('../api/get_users.php')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        allUsers = data.data;
                        renderParticipantsList();
                    } else {
                        console.error('Erro ao carregar usuários:', data.message);
                        document.getElementById('participantsList').innerHTML = 
                            '<div class="px-3 py-2 text-red-500 text-sm">Erro ao carregar usuários</div>';
                    }
                })
                .catch(error => {
                    console.error('Erro na requisição:', error);
                    document.getElementById('participantsList').innerHTML = 
                        '<div class="px-3 py-2 text-red-500 text-sm">Erro ao conectar com o servidor</div>';
                });
        }

        // Toggle dropdown visibility
        function toggleParticipantsDropdown() {
            const dropdown = document.getElementById('participantsDropdown');
            const icon = document.getElementById('dropdownIcon');
            
            if (dropdown.classList.contains('hidden')) {
                dropdown.classList.remove('hidden');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
                document.getElementById('participantsSearch').focus();
            } else {
                closeParticipantsDropdown();
            }
        }

        // Close dropdown
        function closeParticipantsDropdown() {
            const dropdown = document.getElementById('participantsDropdown');
            const icon = document.getElementById('dropdownIcon');
            dropdown.classList.add('hidden');
            icon.classList.remove('fa-chevron-up');
            icon.classList.add('fa-chevron-down');
            document.getElementById('participantsSearch').value = '';
            renderParticipantsList();
        }

        // Filter participants based on search
        function filterParticipants() {
            const searchTerm = document.getElementById('participantsSearch').value.toLowerCase();
            const filteredUsers = allUsers.filter(user => 
                user.name.toLowerCase().includes(searchTerm) || 
                user.username.toLowerCase().includes(searchTerm) ||
                user.email.toLowerCase().includes(searchTerm)
            );
            renderParticipantsList(filteredUsers);
        }

        // Render participants list
        function renderParticipantsList(users = allUsers) {
            const listContainer = document.getElementById('participantsList');
            
            if (users.length === 0) {
                listContainer.innerHTML = '<div class="px-3 py-2 text-gray-500 text-sm">Nenhum usuário encontrado</div>';
                return;
            }

            listContainer.innerHTML = users.map(user => {
                const isSelected = selectedParticipants.some(p => p.id === user.id);
                
                return `
                    <div class="px-3 py-2 hover:bg-gray-100 cursor-pointer flex items-center justify-between ${isSelected ? 'bg-indigo-50' : ''}"
                         onclick="toggleParticipant(${user.id}, '${user.username || user.name}')">
                        <div>
                            <div class="font-medium text-sm">${user.username || user.name}</div>
                        </div>
                        ${isSelected ? '<i class="fas fa-check text-indigo-600"></i>' : ''}
                    </div>
                `;
            }).join('');
        }

        // Toggle participant selection
        function toggleParticipant(id, username) {
            const existingIndex = selectedParticipants.findIndex(p => p.id === id);
            
            if (existingIndex >= 0) {
                // Remove participant
                selectedParticipants.splice(existingIndex, 1);
            } else {
                // Add participant
                selectedParticipants.push({ id, username });
            }
            
            updateSelectedParticipantsDisplay();
            renderParticipantsList();
        }

        // Update the display of selected participants
        function updateSelectedParticipantsDisplay() {
            const placeholder = document.getElementById('participantsPlaceholder');
            const selectedContainer = document.getElementById('selectedParticipants');
            
            if (selectedParticipants.length === 0) {
                placeholder.style.display = 'block';
                selectedContainer.innerHTML = '';
            } else {
                placeholder.style.display = 'none';
                selectedContainer.innerHTML = selectedParticipants.map(participant => `
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                        ${participant.username}
                        <button type="button" class="ml-1 text-indigo-600 hover:text-indigo-800" onclick="removeParticipant(${participant.id})">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                `).join('');
            }
        }

        // Remove participant
        function removeParticipant(id) {
            selectedParticipants = selectedParticipants.filter(p => p.id !== id);
            updateSelectedParticipantsDisplay();
            renderParticipantsList();
        }

        function addTimeSlot() {
            const timeSlotsList = document.getElementById('timeSlotsList');
            const timeSlotItem = document.querySelector('.time-slot-item');
            const newTimeSlot = timeSlotItem.cloneNode(true);
            timeSlotsList.appendChild(newTimeSlot);
        }

        function removeTimeSlot(button) {
            const timeSlotItem = button.parentNode.parentNode;
            timeSlotItem.remove();
        }

        function showTab(tabId) {
            const tabs = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabs.forEach(tab => tab.classList.remove('active'));
            tabContents.forEach(content => content.classList.add('hidden'));

            document.getElementById(tabId + 'Tab').classList.add('active');
            document.getElementById(tabId + 'Content').classList.remove('hidden');
        }

        // Calendar variables
        let currentDate = new Date();
        const monthNames = [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];

        // Load calendar on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, starting initialization...');
            initializeCalendar();
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('#participantsInput') && !e.target.closest('#participantsDropdown')) {
                    closeParticipantsDropdown();
                }
            });
        });

        function initializeCalendar() {
            renderCalendar();
            
            // Event listeners for navigation
            document.getElementById('prevMonth').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });
            
            document.getElementById('nextMonth').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });
        }

        function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update month header
            document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;
            
            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const calendarDays = document.getElementById('calendarDays');
            calendarDays.innerHTML = '';
            
            // Generate calendar with proper alignment
            const daysInMonth = lastDay.getDate();
            const firstDayOfWeek = firstDay.getDay(); // 0 = Sunday, 1 = Monday, etc.
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDayOfWeek; i++) {
                const emptyElement = document.createElement('div');
                emptyElement.className = 'h-full p-2 border border-gray-100 bg-gray-50';
                calendarDays.appendChild(emptyElement);
            }
            
            // Generate days of current month
            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(year, month, day);
                
                const dayElement = document.createElement('div');
                dayElement.className = `
                    h-full p-2 border border-gray-200 cursor-pointer transition-colors duration-200
                    bg-white hover:bg-blue-50 flex flex-col
                    ${isToday(date) ? 'bg-blue-100 border-blue-300' : ''}
                `;
                
                dayElement.innerHTML = `
                    <div class="font-medium text-sm mb-1">${day}</div>
                    <div class="space-y-1" id="events-${date.getFullYear()}-${date.getMonth()}-${date.getDate()}">
                        <!-- Events will be loaded here -->
                    </div>
                `;
                
                // Add click event
                dayElement.addEventListener('click', () => {
                    selectDate(date);
                });
                
                calendarDays.appendChild(dayElement);
            }
            
            // Load appointments for this month
            loadMonthAppointments(year, month);
        }

        function isToday(date) {
            const today = new Date();
            return date.toDateString() === today.toDateString();
        }

        function selectDate(date) {
            const dateStr = date.toISOString().split('T')[0];
            console.log('Selected date:', dateStr);
            
            // Pre-fill the meeting date and open modal
            document.getElementById('meetingDate').value = dateStr;
            showSpecificDateModal();
        }

        function loadMonthAppointments(year, month) {
            // Calendar is now clean - no sample events
            // Real appointments would be loaded from server here
        }

        // New delegated delete function to handle event properly
        function deleteSpecificDateDelegated(date, button) {
            if (confirm('Tem certeza que deseja remover os horários desta data?')) {
                // Disable the button to prevent multiple clicks
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                fetch('../api/delete_specific_availability.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ specific_date: date })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Horários removidos com sucesso!');
                        loadSpecificAvailability();
                    } else {
                        alert('Erro ao remover horários: ' + data.message);
                        // Re-enable button on error
                        button.disabled = false;
                        button.innerHTML = '<i class="fas fa-trash"></i>';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Erro ao remover horários. Tente novamente.');
                    // Re-enable button on error
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-trash"></i>';
                });
            }
        }

        function showProfileModal() {
            document.getElementById('profileModal').classList.remove('hidden');
        }

        function hideProfileModal() {
            document.getElementById('profileModal').classList.add('hidden');
        }

        function togglePasswordVisibility(inputId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(inputId + 'Icon');
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Handle profile form submission
        document.getElementById('profileForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('../api/update_profile.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Perfil atualizado com sucesso!');
                    hideProfileModal();
                    location.reload();
                } else {
                    alert('Erro ao atualizar perfil: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Erro ao atualizar perfil. Tente novamente.');
            });
        });
    </script>
</body>
</html>
